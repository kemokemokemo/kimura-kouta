//====================================================================================================
//
// HP処理 (Life.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "Life.h"	//インクルードファイル
#include "renderer.h"
#include "manager.h"
#include "explosion.h"
#include "player.h"
#include "enemy.h"
#include "animation.h"

//====================================================================================================
// マクロ定義
//====================================================================================================
#define ENEMY_SIZE (80)

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// グローバル変数
//====================================================================================================
LPDIRECT3DTEXTURE9 CLife::m_pTextureLife[MAX_LIFE] = {};

//====================================================================================================
// コンストラクタ
//====================================================================================================
CLife::CLife(OBJTYPE type) : CScene2D(type)
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLife::Init(D3DXVECTOR3 pos)
{
	CScene2D::Init();
	SetPos(pos);
	return S_OK;
}

//==================================================================================================
//終了処理
//===================================================================================================
void CLife::Uninit(void)
{
	CScene2D::Uninit();
	this->Release();
}

//====================================================================================================
//更新処理
//=====================================================================================================
void CLife::Update(void)
{
	CScene2D::Update();

	//変数宣言
	float Size = ENEMY_SIZE;

	CScene2D::SetSize(Size, Size);
}

//========================================================================================================
// 描画処理
//========================================================================================================
CLife *CLife::Create(D3DXVECTOR3 pos)
{
	CLife *pLife;

	pLife = new CLife(OBJTYPE_LIFE);

	pLife->BindTexture(m_pTextureLife[0]);

	pLife->Init(pos);

	pLife->SetInitTex(1.0f, 1.0f);

	return pLife;
}

//========================================================================================================
// テクスチャの読み込み
//========================================================================================================
HRESULT CLife::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		TEXTUER_011,
		&m_pTextureLife[0]);

	return S_OK;
}

//========================================================================================================
// テクスチャの破棄
//========================================================================================================
void CLife::Unload(void)
{
	for (int nCnt =0; nCnt < MAX_TEXENEMY; nCnt++)
	{
		// 頂点バッファの開放
		if (m_pTextureLife[nCnt] != NULL)
		{
			m_pTextureLife[nCnt]->Release();
			m_pTextureLife[nCnt] = NULL;
		}
	}
}

//========================================================================================================
// 描画処理
//========================================================================================================
void CLife::Draw(void)
{
	CScene2D::Draw();
}

//=========================================================================================================
// スコアの加算
//=========================================================================================================
void CLife::AddLife(int nNumber)
{
	m_nLife += nNumber;

	for (int nCntLife = 0; nCntLife < MAX_LIFE; nCntLife++)
	{
		int nLife = m_nLife / (int)powf(10.0f, MAX_LIFE + nCntLife + 1.0f * 1.0f) % 10;

		SetTex(nLife);
	}
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CLife::~CLife()
{

}