//====================================================================================================
//
// ゲージ処理 (gauge.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "gauge.h"
#include "renderer.h"
#include "manager.h"
#include "Score.h"
#include "Game.h"
#include "player.h"
#include "enemy.h"
#include "boss.h"

//====================================================================================================
// マクロ定義
//====================================================================================================
#define BULLET_SIZE (40)
#define MAX_LIFE (40)

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// グローバル変数
//====================================================================================================
LPDIRECT3DTEXTURE9 CGauge::m_pTextureGauge[MAX_TEXGAUGE] = {};

//====================================================================================================
// コンストラクタ
//====================================================================================================
CGauge::CGauge(OBJTYPE type) : CScene2D(type)
{
	m_move = D3DXVECTOR3(0.0f,0.0f,0.0f);
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nLife = 0;
}

CGauge::CGauge()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CGauge::Init(D3DXVECTOR3 pos, D3DXVECTOR3 move, GAUGE Gauge)
{
	CScene2D::Init();

	SetPos(pos);

	//m_pos = pos;

	//CScene2D::SetPos(m_pos);

	//m_move = move;

	m_aGauge = Gauge;

	SetMove(move);

	return S_OK;
}

//==================================================================================================
//終了処理
//===================================================================================================
void CGauge::Uninit(void)
{
	CScene2D::Uninit();
}

//====================================================================================================
//更新処理
//=====================================================================================================
void CGauge::Update(void)
{
	//変数宣言
	int nPLife = CPlayer::GetLife();
	int nBLife = CBoss::GetLife();
	int nELife = m_nLife;
	D3DXVECTOR3 Emove;
	D3DXVECTOR3 Epos;
	D3DXVECTOR3 move = CBoss::GetMove();
	D3DXVECTOR3 pos = CBoss::GetEPos();


		switch (m_aGauge)
		{
		case GAUGE_PLAYER:

			SetColor(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f));

			CScene2D::UIUpdate(nPLife -1, 100);
			break;

		case GAUGE_ENEMY:
			CScene2D::UIUpdate(m_nLife - 1, 100);
			m_pos = CScene2D::GetPos();
			SetColor(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f));
			m_pos += m_move;
			SetPos(m_pos);
			break;

		case GAUGE_BOSS:
			CScene2D::UIUpdate(nBLife - 1, 10);
			pos += move;
			SetPos(pos);

			if (nBLife >= 11 && nBLife <= 20)
			{
				SetColor(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f));
			}
			else if (nBLife >= 6 && nBLife <= 10)
			{
				SetColor(D3DXCOLOR(1.0f, 1.0f, 0.0f, 1.0f));
			}
			else
			{
				SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
			}

			break;
		}
}

//========================================================================================================
// 移動処理
//========================================================================================================
void CGauge::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//========================================================================================================
// 移動処理
//========================================================================================================
void CGauge::SetLife(int nLife)
{
	m_nLife = nLife;
}

//========================================================================================================
// 移動処理
//========================================================================================================
D3DXVECTOR3 CGauge::Getmove()
{
	return m_move;
}

//========================================================================================================
// 体力の取得
//========================================================================================================
int CGauge::GetLife()
{
	return m_nLife;
}

//========================================================================================================
// 描画処理
//========================================================================================================
CGauge *CGauge::Create(D3DXVECTOR3 pos, D3DXVECTOR3 move, GAUGE Gauge)
{
	CGauge *pBullet;

	pBullet = new CGauge(OBJTYPE_RANKING);

	pBullet->BindTexture(m_pTextureGauge[0]);

	pBullet->Init(pos, move, Gauge);

	return pBullet;
}

//========================================================================================================
// テクスチャの読み込み
//========================================================================================================
HRESULT CGauge::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		TEXTUER_017,
		&m_pTextureGauge[0]);

	return S_OK;
}
//=======================================================================================================
// テクスチャの破棄
//========================================================================================================
void CGauge::Unload(void)
{
	for (int nCnt =0; nCnt < MAX_TEXGAUGE; nCnt++)
	{
		// 頂点バッファの開放
		if (m_pTextureGauge[nCnt] != NULL)
		{
			m_pTextureGauge[nCnt]->Release();
			m_pTextureGauge[nCnt] = NULL;
		}
	}
}

//========================================================================================================
// 描画処理
//========================================================================================================
void CGauge::Draw(void)
{
	CScene2D::Draw();
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CGauge::~CGauge()
{

}