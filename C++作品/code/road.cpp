// ====================================================================================================
//
// ロード処理 [road.cpp]
// Author : Kimura kouta
//
// ====================================================================================================
#include "road.h"
#include <stdio.h>              // 一般的なヘッダー
#include "enemy.h"
#include "save.h"

// ====================================================================================================
//
// マクロ定義
//
// ====================================================================================================
#define	TEXTURE_ROAD		"DATA/TEX/number001.png"	// 読み込むテクスチャファイル名
#define ROAD_SIZE (20)								// ロードボードの大きさ
#define ROAD_MAX (10)								// 数値
#define ROAD_DATE (5)										// ロード数
#define SAVE_FILE_NAME ("text.txt") // セーブファイル

// ====================================================================================================
// プロトタイプ宣言
// ====================================================================================================

// ====================================================================================================
// 前方宣言初期化
// ====================================================================================================
ROAD	CRoad::m_aLoad[MAX_ENEMYROAD] = {};

// ====================================================================================================
// コンストラクタ
// ====================================================================================================
CRoad::CRoad()
{
}

// ====================================================================================================
// デストラクタ
// ====================================================================================================
CRoad::~CRoad()
{
}

// ====================================================================================================
//
// 初期化処理
//
// ====================================================================================================
void CRoad::InitLoad(void)
{
	int nCntLoad;

	for (nCntLoad = 0; nCntLoad < MAX_ENEMYROAD; nCntLoad++)
	{
		m_aLoad[nCntLoad].aName[nCntLoad];
		m_aLoad[nCntLoad].nPoint = 0;
	}

	LoadData();
}

// ====================================================================================================
//
// ロードデータ取得関数
//
// ====================================================================================================
ROAD *CRoad::GetLoad(void)
{
	return &m_aLoad[0];
}

// ====================================================================================================
// メモリの確保
// ====================================================================================================
CRoad * CRoad::Create()
{
	CRoad *pLoad;

	pLoad = new CRoad();

	pLoad->InitLoad();

	return pLoad;
}

// ====================================================================================================
// ロード関数
// ====================================================================================================
void CRoad::LoadData(void)
{
	// ファイルポイント
	FILE *pFile;

	int nCntLoad;

	// ファイル開
	pFile = fopen(SAVE_FILE_NAME, "r");

	// 開けた
	if (pFile != NULL)
	{
		for (nCntLoad = 0; nCntLoad < MAX_ENEMYROAD; nCntLoad++)
		{
			fscanf(pFile, "%d", &m_aLoad[nCntLoad].nPoint); // 名前
		}
		// ファイル
		fclose(pFile);
	}
	// 開けない
	else
	{
		printf("開けれませんでした\n");
	}
}

// ====================================================================================================
//
// ロード関数
//
// ====================================================================================================
void CRoad::LoadObject(void)
{
}