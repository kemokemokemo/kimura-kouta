//====================================================================================================
//
// アイテム処理 (Item.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "Item.h"	//インクルードファイル
#include "renderer.h"
#include "manager.h"
#include "explosion.h"
#include "player.h"
#include "enemy.h"
#include "animation.h"
#include "Score.h"
#include "Game.h"
#include "sound.h"

//====================================================================================================
// マクロ定義
//====================================================================================================
#define ENEMY_SIZE (100)

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// グローバル変数
//====================================================================================================
LPDIRECT3DTEXTURE9 CItem::m_pTextureItem[MAX_ITEMTEX] = {};

//====================================================================================================
// コンストラクタ
//====================================================================================================
CItem::CItem(OBJTYPE type) : CScene2D(type)
{
	int m_move = 0;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CItem::Init(void)
{
	CScene2D::Init();
	return S_OK;
}

//==================================================================================================
//終了処理
//===================================================================================================
void CItem::Uninit(void)
{
	CScene2D::Uninit();
	this->Release();
}

//====================================================================================================
//更新処理
//=====================================================================================================
void CItem::Update(void)
{
	CScene2D::Update();

	m_pos = CScene2D::GetPos();

	//変数宣言
	float Size = ENEMY_SIZE;

	m_pos += m_move;

	CollisionPL();

	CScene2D::SetPos(m_pos);
	CScene2D::SetSize(Size, Size);
}

//========================================================================================================
// 移動処理
//========================================================================================================
void CItem::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//========================================================================================================
// 描画処理
//========================================================================================================
CItem *CItem::Create(void)
{
	CItem *pItem;

	pItem = new CItem(OBJTYPE_ITEM);

	pItem->BindTexture(m_pTextureItem[0]);

	pItem->Init();

	pItem->SetInitTex(1.0f, 1.0f);

	return pItem;
}

//========================================================================================================
// テクスチャの読み込み
//========================================================================================================
HRESULT CItem::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		TEXTUER_013,
		&m_pTextureItem[0]);

	return S_OK;
}

//========================================================================================================
// テクスチャの破棄
//========================================================================================================
void CItem::Unload(void)
{
	for (int nCnt =0; nCnt < MAX_ITEMTEX; nCnt++)
	{
		// 頂点バッファの開放
		if (m_pTextureItem[nCnt] != NULL)
		{
			m_pTextureItem[nCnt]->Release();
			m_pTextureItem[nCnt] = NULL;
		}
	}
}

//========================================================================================================
// 当たり判定
//========================================================================================================
void CItem::CollisionPL(void)
{
	//敵の取得
	//CPlayer *pPlayer = CGame::GetPlayer();

	//敵の取得
	//CScore *pScore = CGame::GetScore();

	D3DXVECTOR3 PosP;

	//半径
	float fRadiusE = 100 / 2;
	float fRadiusP = 100 / 2;

	int nCntScene;

	for (nCntScene = 0; nCntScene < 256; nCntScene++)
	{
		CScene *pScene;
		pScene = CScene::GetScene(OBJTYPE_PLAYER, nCntScene);

		if (pScene != NULL)
		{
			CScene::OBJTYPE objtype;
			objtype = pScene->GetObjType();

			if (objtype == CScene::OBJTYPE_PLAYER)
			{
				PosP = ((CPlayer*)pScene)->GetPlayerPos();

				//円の当たり判定
				if ((m_pos.x - PosP.x) * (m_pos.x - PosP.x) + (m_pos.y - PosP.y) * (m_pos.y - PosP.y) <= (fRadiusP + fRadiusE) * (fRadiusP + fRadiusE))
				{

					CAnimation::Create(m_pos,CAnimation::ANIMATION_POWERUP,40);

					CSound *pSound = CManager::GetSound();
					pSound->PlaySound(SOUND_LABEL_SE_SUCORUP);

					CNumber *pNumber;
					pNumber = CScore::GetaScore();

					//スコア加算
					((CScore*)pNumber)->AddScore(5000);

					Release();
				}
			}
		}
	}
}
//========================================================================================================
// 描画処理
//========================================================================================================
void CItem::Draw(void)
{
	CScene2D::Draw();
}

//========================================================================================================
// エネミーの処理
//========================================================================================================
D3DXVECTOR3 CItem::GetIPos(void)
{
	return m_pos;
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CItem::~CItem()
{

}